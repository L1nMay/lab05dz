name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          lfs: false

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        shell: bash
        timeout-minutes: 5
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake libgtest-dev lcov

      - name: Remove build directory (Clean CMake Cache) - Linux
        if: runner.os == 'Linux'
        shell: bash
        run: rm -rf ${{ github.workspace }}/build && rm -f ${{ github.workspace }}/CMakeCache.txt

      - name: Clear Git Cache
        shell: bash
        run: git fetch --all --prune

      - name: Debug - List Files - Linux
        if: runner.os == 'Linux'
        shell: bash
        run: |
          echo "Listing files in ${{ github.workspace }}"
          ls -lR ${{ github.workspace }}

      - name: Debug - Environment Variables - Linux
        if: runner.os == 'Linux'
        shell: bash
        run: |
          echo "Environment variables:"
          env

      - name: Configure CMake - Linux
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -x
          SOURCE_DIR="${{ github.workspace }}"
          BUILD_DIR="${{ github.workspace }}/build"
          echo "Source directory: $SOURCE_DIR"
          echo "Build directory: $BUILD_DIR"
          cmake -S "$SOURCE_DIR" -B "$BUILD_DIR" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-fprofile-arcs -ftest-coverage"
          set +x

      - name: Build - Linux
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -x
          BUILD_DIR="${{ github.workspace }}/build"
          cmake --build "$BUILD_DIR" --config Debug
          set +x

      - name: Test - Linux
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -x
          BUILD_DIR="${{ github.workspace }}/build"
          ctest --test-dir "$BUILD_DIR"
          set +x

      - name: Generate Coverage Report - Linux
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -x
          cd ${{ github.workspace }}/build
          lcov -capture -output-file coverage.info
          lcov -remove coverage.info '/usr/*' '*/test/*' -output-file coverage.info
          genhtml -output-directory coverage coverage.info
          set +x
